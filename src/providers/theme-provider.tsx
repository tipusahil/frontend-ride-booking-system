"use client";

import { useCallback, useEffect, useRef, useState } from "react";
import { flushSync } from "react-dom";

import { Laptop, Moon, Sun } from "lucide-react";
// üîπ Laptop icon ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá System Theme ‡¶ü‡¶ó‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§

import { cn } from "@/lib/utils";
import { AnimatePresence, motion } from "framer-motion";
import { Button } from "@/components/ui/button";

// üîπ Theme-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø type ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: light, dark ‡¶è‡¶¨‡¶Ç system
type Theme = "light" | "dark" | "system";

type AnimatedThemeTogglerProps = {
  className?: string;
};

export const AnimatedThemeToggler = ({
  className,
}: AnimatedThemeTogglerProps) => {
  const buttonRef = useRef<HTMLButtonElement>(null);

  // üîπ [‡ßß] theme ‡¶∏‡ßç‡¶ü‡ßá‡¶ü: localStorage ‡¶•‡ßá‡¶ï‡ßá ‡¶•‡¶ø‡¶Æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶¨‡ßá, ‡¶®‡¶æ ‡¶™‡ßá‡¶≤‡ßá 'system' ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶π‡¶¨‡ßá‡•§
  // 'darkMode' ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡¶ü‡¶ø ‡¶Ö‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶π‡¶ì‡ßü‡¶æ‡ßü ‡¶è‡¶ü‡¶ø ‡¶¨‡¶æ‡¶¶ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶ï‡¶æ‡¶∞‡¶£ 'theme' ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ú‡¶æ‡¶®‡¶æ ‡¶Ø‡¶æ‡ßü‡•§
  const [theme, setTheme] = useState<Theme>(() => {
    if (typeof window === "undefined") return "system"; // ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞-‡¶∏‡¶æ‡¶á‡¶° ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞‡¶ø‡¶Ç-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    // localStorage ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶•‡¶ø‡¶Æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶Ø‡¶¶‡¶ø ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶¨‡ßá 'system' ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶π‡¶¨‡ßá‡•§
    return (localStorage.getItem("theme") as Theme) || "system";
  });

  // üîπ useEffect: theme ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡¶≤‡ßá ‡¶¨‡¶æ system-‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡¶≤‡ßá UI ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§
  useEffect(() => {
    const updateDocumentTheme = () => {
      if (theme === "system") {
        // ‡¶Ø‡¶¶‡¶ø ‡¶•‡¶ø‡¶Æ 'system' ‡¶π‡ßü, ‡¶§‡¶¨‡ßá ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§
        const prefersDark = window.matchMedia(
          "(prefers-color-scheme: dark)"
        ).matches;
        // HTML ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó-‡¶è 'dark' ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶Ø‡ßã‡¶ó ‡¶¨‡¶æ ‡¶∏‡¶∞‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ‡•§
        document.documentElement.classList.toggle("dark", prefersDark);
      } else {
        // ‡¶Ø‡¶¶‡¶ø 'light' ‡¶¨‡¶æ 'dark' ‡¶π‡ßü, ‡¶§‡¶¨‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶∏‡ßá‡¶á ‡¶•‡¶ø‡¶Æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§
        const isDark = theme === "dark";
        document.documentElement.classList.toggle("dark", isDark);
      }
    };

    // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶æ ‡¶•‡¶ø‡¶Æ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡¶≤‡ßá ‡¶•‡¶ø‡¶Æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡•§
    updateDocumentTheme();

    // üîπ System theme auto update handler:
    // ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶•‡¶ø‡¶Æ (OS settings) ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡¶≤‡ßá ‡¶∞‡¶ø‡ßü‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Event Listener ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§
    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    const systemChangeHandler = () => {
      // ‡¶Ø‡¶¶‡¶ø ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶•‡¶ø‡¶Æ 'system' ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶¨‡ßá‡¶á ‡¶è‡¶á ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶´‡¶≤‡¶ø‡¶§ ‡¶π‡¶¨‡ßá‡•§
      if (theme === "system") {
        updateDocumentTheme();
      }
    };

    mediaQuery.addEventListener("change", systemChangeHandler);

    // Cleanup function: Component unmount ‡¶π‡¶≤‡ßá Event Listener ‡¶∏‡¶∞‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá‡•§
    return () => mediaQuery.removeEventListener("change", systemChangeHandler);
  }, [theme]);

  // üîπ toggleTheme() ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®: View Transition API ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∏‡ßç‡¶Æ‡ßÅ‡¶• ‡¶•‡¶ø‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡•§
  // ‡¶•‡¶ø‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡ßá‡¶∞ ‡¶ï‡ßç‡¶∞‡¶Æ: light ‚Üí dark ‚Üí system ‚Üí light
  const toggleTheme = useCallback(async () => {
    if (!buttonRef.current) return;

    // View Transition ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§
    await document.startViewTransition(async () => {
      // DOM ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶™‡ßÅ‡¶≤‡ßá‡¶∂‡¶® (‡¶Ø‡ßá‡¶Æ‡¶® useState ‡¶Ü‡¶™‡¶°‡ßá‡¶ü) ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø flushSync ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá,
      // ‡¶Ø‡¶æ‡¶§‡ßá transition ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá‡¶á ‡¶∞‡¶ø‡ßü‡¶æ‡¶ï‡ßç‡¶ü ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶è‡¶¨‡¶Ç DOM ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï ‡¶π‡ßü‡•§
      flushSync(() => {
        let newTheme: Theme;

        // üîπ ‡¶§‡¶ø‡¶® ‡¶ß‡¶æ‡¶™‡ßá‡¶∞ ‡¶•‡¶ø‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶≤‡¶ú‡¶ø‡¶ï:
        if (theme === "light") newTheme = "dark";
        else if (theme === "dark") newTheme = "system";
        else newTheme = "light";

        // ‡¶®‡¶§‡ßÅ‡¶® ‡¶•‡¶ø‡¶Æ ‡¶∏‡ßá‡¶ü ‡¶è‡¶¨‡¶Ç localStorage-‡¶è ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§
        setTheme(newTheme);
        localStorage.setItem("theme", newTheme);

        // DOM-‡¶è 'dark' ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï (useEffect ‡¶è‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡¶ì ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®)‡•§
        if (newTheme === "system") {
          const prefersDark = window.matchMedia(
            "(prefers-color-scheme: dark)"
          ).matches;
          document.documentElement.classList.toggle("dark", prefersDark);
        } else {
          const isDark = newTheme === "dark";
          document.documentElement.classList.toggle("dark", isDark);
        }
      });
    }).ready; // .ready ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü ‡¶Ø‡¶ñ‡¶® View Transition ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá DOM-‡¶è ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™‡¶ö‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡•§

    // üîπ View Transition Animation: Circular Reveal Effect ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§
    // ‡¶¨‡¶æ‡¶ü‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßá ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡ßá‡¶∞ ‡¶∂‡ßá‡¶∑ ‡¶™‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßÉ‡¶§‡ßç‡¶§‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶Æ‡ßá‡¶∂‡¶®‡•§
    const { left, top, width, height } =
      buttonRef.current.getBoundingClientRect();
    const centerX = left + width / 2;
    const centerY = top + height / 2;

    // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶Æ‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßÉ‡¶§‡ßç‡¶§‡ßá‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶¨‡ßç‡¶Ø‡¶æ‡¶∏‡¶æ‡¶∞‡ßç‡¶ß ‡¶®‡¶ø‡¶∞‡ßç‡¶£‡¶Ø‡¶º ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§
    const maxDistance = Math.hypot(
      Math.max(centerX, window.innerWidth - centerX),
      Math.max(centerY, window.innerHeight - centerY)
    );

    // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶Æ‡ßá‡¶∂‡¶®‡¶ü‡¶ø DOM-‡¶è‡¶∞ root element-‡¶è ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§
    document.documentElement.animate(
      {
        clipPath: [
          `circle(0px at ${centerX}px ${centerY}px)`,
          `circle(${maxDistance}px at ${centerX}px ${centerY}px)`,
        ],
      },
      {
        duration: 700,
        easing: "ease-in-out",
        // '::view-transition-new(root)' - ‡¶è‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶•‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶∞‡ßÅ‡¶ü ‡¶è‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶Æ‡ßá‡¶∂‡¶®‡•§
        pseudoElement: "::view-transition-new(root)",
      }
    );
  }, [theme]); // dependency ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá 'theme' ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§

  return (
    <Button
    variant={"outline"}
    size={"icon"}
      ref={buttonRef}
      onClick={toggleTheme}
      aria-label="Switch theme"
      className={cn(
        "flex items-center justify-center  p-1 rounded-lg outline-none focus:outline-none active:outline-none focus:ring-0 cursor-pointer transition-colors",
        className
      )}
      type="button"
    >
      <AnimatePresence mode="wait" initial={false}>
        {/* üîπ ‡¶§‡¶ø‡¶®‡¶ü‡¶ø Icon-‡¶ï‡ßá handle ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç Framer Motion ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶Æ‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá */}
        {theme === "dark" ? (
          <motion.span
            key="sun-icon"
            initial={{ opacity: 0, scale: 0.55, rotate: 360 }}
            animate={{ opacity: 1, scale: 1, rotate: 0 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.33 }}
            className="text-white" // Dark ‡¶•‡¶ø‡¶Æ‡ßá ‡¶Ü‡¶á‡¶ï‡¶®‡ßá‡¶∞ ‡¶∞‡¶ô ‡¶∏‡¶æ‡¶¶‡¶æ
          >
            <Sun />
          </motion.span>
        ) : theme === "light" ? (
          <motion.span
            key="moon-icon"
            initial={{ opacity: 0, scale: 0.55, rotate: -25 }}
            animate={{ opacity: 1, scale: 1, rotate: 0 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.33 }}
            className="text-black" // Light ‡¶•‡¶ø‡¶Æ‡ßá ‡¶Ü‡¶á‡¶ï‡¶®‡ßá‡¶∞ ‡¶∞‡¶ô ‡¶ï‡¶æ‡¶≤‡ßã
          >
            <Moon />
          </motion.span>
        ) : (
          <motion.span
            key="system-icon"
            initial={{ opacity: 0, scale: 0.55, rotate: -25 }}
            animate={{ opacity: 1, scale: 1, rotate: 0 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.33 }}
            // üîπ [‡ß®] ‡¶Ü‡¶á‡¶ï‡¶® ‡¶ï‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶´‡¶ø‡¶ï‡ßç‡¶∏: Light ‡¶•‡¶ø‡¶Æ‡ßá ‡¶Ø‡¶æ‡¶§‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡ßü ‡¶§‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§
            // Light ‡¶•‡¶ø‡¶Æ‡ßá text-gray-600, Dark ‡¶•‡¶ø‡¶Æ‡ßá text-gray-300
            className="text-gray-600 dark:text-gray-300"
          >
            <Laptop />
          </motion.span>
        )}
      </AnimatePresence>
    </Button>
  );
};
